/**
* Callback functions available to users
* Place in Theme scripts to perform actions after map has rendered
* Theme scripts should be enqueued with a script dependency for 'simple-locator'
* Deprecated as of version 2 in place of events.
*/

// Replaced with data-attribute
function openInfoWindow(id){
	google.maps.event.trigger(SimpleLocator.markers[0][id], 'click');
	var lat = SimpleLocator.markers[0][id].getPosition().lat();
	var lng = SimpleLocator.markers[0][id].getPosition().lng();
	var position = new google.maps.LatLng(lat,lng);
	SimpleLocator.maps[0].panTo(position);
	SimpleLocator.maps[0].fitBounds(position);
	SimpleLocator.maps[0].setZoom(12);
	return false;
}

// Runs before form has been submitted/after click
function wpsl_before_submit(active_form, formelements){}

// Runs after map & results render
function wpsl_after_render(active_form){}

// Runs on click event on a map marker
function wpsl_click_marker(marker, i, active_form, post_id){}

// Runs if no results were returned from the query
function wpsl_no_results(location, active_form){}

// Runs on form error
function wpsl_error(message, active_form){}

// Runs immediately on form success, pre-render of map/results
function wpsl_success(resultcount, results, active_form){}

// Returns the Google Maps Response
function wpsl_googlemaps_response(){
	return googlemaps_response;
}

// Runs after locations map has rendered
function wpsl_all_locations_rendered(map){}

// Runs after clicking on a marker in all locations map
function wpsl_all_locations_marker_clicked(marker, infoWindow){}
/**
* Display a single location map
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.SingleLocation = function()
{
	var self = this;
	var $ = jQuery;

	self.selectors = {
		mapContainer : 'data-simple-locator-single-map',
		latitude : 'data-latitude',
		longitude : 'data-longitude',
		title : 'data-title'
	}

	self.bindEvents = function()
	{
		$(document).ready(function(){
			self.loadAllMaps();
		});
	}

	self.loadAllMaps = function()
	{
		var maps = $('[' + self.selectors.mapContainer + ']');
		$.each(maps, function(){
			self.loadMap($(this));
		});
	}

	/**
	* Load the map
	*/
	self.loadMap = function(container)
	{
		var latitude = parseFloat($(container).attr(self.selectors.latitude));
		var longitude = parseFloat($(container).attr(self.selectors.longitude));
		var title = $(container).attr(self.selectors.title);

		var mappin = ( wpsl_locator.mappin ) ? wpsl_locator.mappin : '';
		var position = new google.maps.LatLng( latitude, longitude );
		var options = {
			zoom: 12,
			styles: wpsl_locator.mapstyles
		};
		
		// Override options if custom options are set
		if ( wpsl_locator.custom_map_options === '1' ) options = wpsl_locator.map_options;
		options.center = position;

		var map = new google.maps.Map(container[0], options);
		var marker = new google.maps.Marker({
			position: position,
			map: map,
			icon: mappin,
			title: title
		});
		$(container).removeClass('loading');
	}

	return self.bindEvents();
}
/**
* The Primary Form Object
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.Form = function()
{
	var self = this;
	var $ = jQuery;

	self.activeForm;
	self.activeFormContainer;
	self.isWidget = false;
	self.mapContainer;
	self.resultsContainer;
	self.formData;

	self.bindEvents = function()
	{
		$(document).on('click', '[' + SimpleLocator.selectors.submitButton + ']', function(e){
			e.preventDefault();
			self.activeForm = $(this).parents('[' + SimpleLocator.selectors.form + ']');
			self.activeFormContainer = $(this).parents('[' + SimpleLocator.selectors.formContainer + ']');
			self.processForm();
		});
		$(document).on('simple-locator-address-geocoded', function(e, results, form){
			$(self.activeForm).find('[' + SimpleLocator.selectors.inputLatitude + ']').val(results.latitude);
			$(self.activeForm).find('[' + SimpleLocator.selectors.inputLongitude + ']').val(results.longitude);
			$(self.activeForm).find('[' + SimpleLocator.selectors.inputFormattedLocation + ']').val(results.formatted_address);
			self.setFormData();
			self.submitForm();
		});
	}

	/**
	* Process the form submission
	*/
	self.processForm = function()
	{
		self.toggleLoading(true);
		self.setResultsContainers();
		var geocoder = new SimpleLocator.Geocoder();
		geocoder.getCoordinates(self.activeForm);
	}

	/**
	* Set the appropriate containers for results
	*/
	self.setResultsContainers = function()
	{
		if ( $(self.activeForm).siblings('#widget').length > 0 ) self.isWidget = true;	
		self.mapContainer = ( wpsl_locator_options.mapcont === '' || self.isWidget )
			? $(self.activeFormContainer).find('[' + SimpleLocator.selectors.map + ']')
			: $(wpsl_locator_options.mapcont);
		
		self.resultsContainer = ( wpsl_locator_options.resultscontainer === '' || self.isWidget )
			? (self.activeFormContainer).find('[' + SimpleLocator.selectors.results + ']')
			: $(wpsl_locator_options.resultscontainer);
		return;
	}

	/**
	* Set the form data for processing
	*/
	self.setFormData = function(geocode_results)
	{
		var allow_empty_address = $(self.activeForm).attr('data-simple-locator-form-allow-empty');
		allow_empty_address = ( typeof allow_empty_address === 'undefined' || allow_empty_address === '' ) ? false : true;

		var address = $(self.activeForm).find('[' + SimpleLocator.selectors.inputAddress + ']');
		address = ( typeof address === 'undefined' ) ? false : $(address).val();

		var distance = $(self.activeForm).find('[' + SimpleLocator.selectors.inputDistance + ']');
		distance = ( typeof distance === 'undefined' ) ? false : $(distance).val();

		var geolocation = $(self.activeForm).find('[' + SimpleLocator.selectors.inputGeocode + ']').val();
		geolocation = ( geolocation === '' || geolocation === 'false' ) ? false : true;

		self.formData = {
			address : address,
			formatted_address : $(self.activeForm).find('[' + SimpleLocator.selectors.inputFormattedLocation + ']').val(),
			distance : distance,
			latitude : $(self.activeForm).find('[' + SimpleLocator.selectors.inputLatitude + ']').val(),
			longitude :  $(self.activeForm).find('[' + SimpleLocator.selectors.inputLongitude + ']').val(),
			unit : $(self.activeForm).find('[' + SimpleLocator.selectors.inputUnit + ']').val(),
			geolocation : geolocation,
			allow_empty_address : allow_empty_address
		}

		self.setTaxonomies();

		// Custom Input Data (for SQL filter availability)
		if ( wpsl_locator.postfields.length == 0 ) return
		for ( var i = 0; i < wpsl_locator.postfields.length; i++ ){
			var field = wpsl_locator.postfields[i];
			formdata[field] = $('input[name=' + field + ']').val();
		}
	}

	/**
	* Set taxonomies in the form data if applicable
	*/
	self.setTaxonomies = function()
	{
		var taxonomyCheckboxes = $(self.activeForm).find('input[name^="taxonomy"]:checked');
		var taxonomySelect = $(self.activeForm).find('select[name^="taxonomy"]')

		var taxonomies = ( taxonomyCheckboxes.length > 0 ) ? $(taxonomyCheckboxes).serializeArray() : [];
	
		// Select Menus
		$.each(taxonomySelect, function(i, v){
			if ( $(this).val() === "" ) return;
			var selected = {};
			selected.name = $(this).attr('name');
			selected.value = $(this).val();
			taxonomies.push(selected);
		});
		
		// // Create an array from the selected taxonomies
		var taxonomy_array = {};
		$.each(taxonomies, function(i, v){
			var tax_name = this.name.replace( /(^.*\[|\].*$)/g, '' );
			if ( (typeof taxonomy_array[tax_name] == undefined) 
				|| !(taxonomy_array[tax_name] instanceof Array) ) 
				taxonomy_array[tax_name] = [];
			if ( tax_name) taxonomy_array[tax_name].push(this.value);
		});

		self.formData.taxonomies = taxonomy_array;
	}

	/**
	* Submit the form
	*/
	self.submitForm = function()
	{
		$.ajax({
			url : SimpleLocator.endpoints.search,
			type: 'GET',
			datatype: 'jsonp',
			data: self.formData,
			success: function(data){
				if ( wpsl_locator.jsdebug === '1' ){
					console.log('Form Response');
					console.log(data);
				}
				if (data.status === 'error'){
					$(document).trigger('simple-locator-error', ['form-error', self.activeForm, data.message]);
					return;
				}
				if ( data.result_count === 0 ){
					var message = wpsl_locator.nolocationserror + ' ' + data.formatted_address;
					$(document).trigger('simple-locator-error', ['form-error', self.activeForm, message]);
					return;
				}
				$(document).trigger('simple-locator-form-success', [data, self.activeForm]);
			},
			error: function(data){
				if ( wpsl_locator.jsdebug === '1' ){
					console.log('Form Response Error');
					console.log(data.responseText);
				}
			}
		});
	}

	/**
	* Toggle Loading
	*/
	self.toggleLoading = function(loading)
	{
		if ( loading ){
			$('[' + SimpleLocator.selectors.inputLatitude + ']').val('');
			$('[' + SimpleLocator.selectors.inputLongitude + ']').val('');
			$('[' + SimpleLocator.selectors.inputFormattedLocation + ']').val('');
			$(self.activeFormContainer).find('[' + SimpleLocator.selectors.formError + ']').hide();
			$(self.activeFormContainer).find('[' + SimpleLocator.selectors.results + ']').empty().addClass('loading').show();
			return;
		}
	}

	return self.bindEvents();
}
/**
* Geocode an Address
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.Geocoder = function()
{
	var self = this;
	var $ = jQuery;

	/**
	* Get coordinates and formatted for a provided address
	* @param address string
	* @param form object
	* @return array
	*/
	self.getCoordinates = function(form)
	{
		var searchTerm = $(form).find('[' + SimpleLocator.selectors.inputAddress + ']').val();
		var searchResults = [];
		geocoder = new google.maps.Geocoder();
		geocoder.geocode({
			'address' : searchTerm
		}, function(results, status){
			if ( status == google.maps.GeocoderStatus.OK ){
				googlemaps_response = results;
				searchResults['latitude'] = results[0].geometry.location.lat();
				searchResults['longitude'] = results[0].geometry.location.lng();
				searchResults['formatted_address'] = results[0].formatted_address;
				if ( wpsl_locator.jsdebug === '1' ){
					console.log('Google Geocode Response');
					console.log(results);
				}
				$(document).trigger('simple-locator-address-geocoded', [searchResults, form]);
			} else {
				$(document).trigger('simple-locator-error', ['geocode-error', form, wpsl_locator.notfounderror]);
			}
		});
	}
}
/**
* Display results on a map
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.ResultsMap = function()
{
	var self = this;
	var $ = jQuery;

	self.activeForm;
	self.activeFormContainer;
	self.activeMap;
	self.data;
	self.mapIndex;

	self.bindEvents = function()
	{
		$(document).on('simple-locator-form-success', function(e, data, form){
			self.activeForm = $(form);
			self.activeFormContainer = $(form).parents('[' + SimpleLocator.selectors.formContainer + ']');
			self.data = data;
			self.setMapIndex();
			self.loadMap();
		});
	}

	/**
	* Set the map index
	*/
	self.setMapIndex = function()
	{
		var maps = $('[' + SimpleLocator.selectors.map + ']');
		self.activeMap = $(self.activeFormContainer).find('[' + SimpleLocator.selectors.map + ']');
		self.mapIndex = $(self.activeMap).index(maps);
	}

	self.loadMap = function()
	{
		SimpleLocator.markers[self.mapIndex] = [];
		
		if ( typeof wpsl_locator_options != 'undefined' ){
			var disablecontrols = ( wpsl_locator_options.mapcontrols === 'show') ? false : true;
		} else {
			var disablecontrols = false;
		}

		// Control Position
		if ( typeof wpsl_locator_options != 'undefined' ){
			var controlposition = google.maps.ControlPosition[wpsl_locator_options.mapcontrolsposition];
		} else {
			var controlposition = "TOP_LEFT";
		}
		
		var mappin = ( wpsl_locator.mappin ) ? wpsl_locator.mappin : '';
		var bounds = new google.maps.LatLngBounds();
		var mapOptions = {
			mapTypeId: 'roadmap',
			mapTypeControl: false,
			zoom: 8,
			styles: wpsl_locator.mapstyles,
			panControl : false,
			disableDefaultUI: disablecontrols,
			zoomControlOptions : {
				style: google.maps.ZoomControlStyle.SMALL,
				position : controlposition
			}
		}

		// Override options if custom options are set
		if ( wpsl_locator.custom_map_options === '1' ) mapOptions = wpsl_locator.map_options;
		var locations = [];
		var infoWindow = new google.maps.InfoWindow(), marker, i;
		
		SimpleLocator.maps[self.mapIndex] = new google.maps.Map( self.activeMap[0], mapOptions );
		
		// Array of locations
		for (var i = 0, length = self.data.results.length; i < length; i++) {
			var location = {
				title: self.data.results[i].title,
				lat: self.data.results[i].latitude,
				lng: self.data.results[i].longitude,
				id: self.data.results[i].id,
				infowindow: self.data.results[i].infowindow
			};
			locations.push(location);
		}
		
		// Loop through array of markers & place each one on the map  
		for( i = 0; i < locations.length; i++ ) {
			var position = new google.maps.LatLng(locations[i].lat, locations[i].lng);
			bounds.extend(position);
			
			marker = new google.maps.Marker({
				position: position,
				map: SimpleLocator.maps[self.mapIndex],
				title: locations[i].title,
				icon: mappin
			});	

			// Info window for each marker 
			google.maps.event.addListener(marker, 'click', (function(marker, i) {
				return function() {
					infoWindow.setContent(locations[i].infowindow);
					infoWindow.open(SimpleLocator.maps[self.mapIndex], marker);

					// Simple Locator Callback function for click event
					wpsl_click_marker(marker, i, self.activeForm, locations[i].id);
				}
			})(marker, i));

			 // Push the marker to the global 'markers' array
	        SimpleLocator.markers[self.mapIndex].push(marker);
			
			// Center the Map
			SimpleLocator.maps[self.mapIndex].fitBounds(bounds);
			var listener = google.maps.event.addListener(SimpleLocator.maps[self.mapIndex], "idle", function() { 
					if ( self.data.results.length < 2 ) {
					SimpleLocator.maps[self.mapIndex].setZoom(13);
				}
				google.maps.event.removeListener(listener); 
			});
		}

		self.toggleLoading(false);
	}

	/**
	* Toggle the loading state on the map
	*/
	self.toggleLoading = function(loading)
	{
		if ( loading ){
			$(self.activeMap).addClass('loading');
			return;
		}
		$(self.activeMap).show();
		$(self.activeMap).removeClass('loading');
	}

	return self.bindEvents();
}
/**
* Display a list of results
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.ResultsList = function()
{
	var self = this;
	var $ = jQuery;

	self.activeForm;
	self.activeFormContainer;
	self.activeList;
	self.data;
	self.listIndex;

	self.bindEvents = function()
	{
		$(document).on('simple-locator-form-success', function(e, data, form){
			self.activeForm = $(form);
			self.activeFormContainer = $(form).parents('[' + SimpleLocator.selectors.formContainer + ']');
			self.data = data;
			self.setMapIndex();
			self.loadList();
		});
	}

	/**
	* Set the map index
	*/
	self.setMapIndex = function()
	{
		var lists = $('[' + SimpleLocator.selectors.results + ']');
		self.activeList = $(self.activeFormContainer).find('[' + SimpleLocator.selectors.results + ']');
		self.listIndex = $(self.activeList).index(lists);
	}

	/**
	* Load the results
	*/
	self.loadList = function()
	{
		if ( self.data.result_count < 1 ){ // No results were returned
			$(self.activeFormContainer).find('[' + SimpleLocator.selectors.error + ']').text(wpsl_locator_options.noresultstext).show();
			$(self.activeList).hide();
			$(self.activeFormContainer).find('[' + SimpleLocator.selectors.map + ']').hide();
			wpsl_no_results(data.formatted_address, active_form);
			return;
		}

		var location = ( self.data.result_count === 1 ) ? wpsl_locator.location : wpsl_locator.locations;

		var output = '<h3 class="wpsl-results-header">' + self.data.result_count + ' ' + location;
		if ( self.data.latitude !== "" ) output += ' ' + wpsl_locator.found_within + ' ' + self.data.distance + ' ' + self.data.unit + ' ' + wpsl_locator.of + ' ';
		output += ( self.data.using_geolocation === "true" ) ? wpsl_locator.yourlocation : self.data.formatted_address;
		output += '</h3>';
		
		if ( wpsl_locator_options.resultswrapper !== "" ) output += '<' + wpsl_locator_options.resultswrapper + '>';

		for( i = 0; i < self.data.results.length; i++ ) {
			output = output + self.data.results[i].output;
		}

		if ( wpsl_locator_options.resultswrapper !== "" ) output += '</' + wpsl_locator_options.resultswrapper + '>';

		self.toggleLoading(false);
		$(self.activeList).removeClass('loading').html(output);

		// Simple Locator Callback function after results have rendered
		wpsl_after_render(self.activeList);
	}

	/**
	* Toggle the loading state on the map
	*/
	self.toggleLoading = function(loading)
	{
		if ( loading ){
			$(self.activeList).addClass('loading');
			return;
		}
		$(self.activeList).removeClass('loading');
	}

	return self.bindEvents();
}
/**
* Open an infowindow when clicking a link
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.InfoWindowOpen = function()
{
	var self = this;
	var $ = jQuery;

	self.mapIndex;
	self.markerIndex;

	self.bindEvents = function()
	{
		$(document).on('click', '[' + SimpleLocator.selectors.infoWindowLink + ']', function(e){
			e.preventDefault();
			self.setIndexes($(this));
			self.openInfoWindow();
		});
	}

	/**
	* Set the map index
	*/
	self.setIndexes = function(link)
	{
		var activeList = $(link).parents('[' + SimpleLocator.selectors.results + ']');
		var lists = $('[' + SimpleLocator.selectors.results + ']');
		self.mapIndex = $(activeList).index(lists);
		self.markerIndex = parseInt($(link).attr(SimpleLocator.selectors.infoWindowLink));
	}

	/**
	* Open the infowindow
	*/
	self.openInfoWindow = function()
	{
		google.maps.event.trigger(SimpleLocator.markers[self.mapIndex][self.markerIndex], 'click');
		$(document).trigger('simple-locator-infowindow-opened', [self.mapIndex, self.markerIndex]);
	}

	return self.bindEvents();
}
/**
* Gets the user's current location if available
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.UserLocation = function()
{
	var self = this;
	var $ = jQuery;

	/**
	* Returns user location if available, null if not
	*/
	self.getLocation = function()
	{
		// if ( !SimpleLocator.jsData.secure ) return null;
		var location = [];
		navigator.geolocation.getCurrentPosition(function(position){
			location['latitude'] = position.coords.latitude;
			location['longitude'] = position.coords.longitude;
		});
		console.log(location);
		return location;
	}

}
/**
* Enable Google Maps Places Autocomplete on Fields
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.PlacesAutocomplete = function()
{
	var self = this;
	var $ = jQuery;

	self.selectors = {
		input : 'data-simple-locator-autocomplete'
	}

	self.bindEvents = function()
	{
		$(document).ready(function(){
			self.enableAutocomplete();
		});
	}

	self.enableAutocomplete = function()
	{
		var inputs = $('[' + self.selectors.input + ']');
		$.each(inputs, function(i, v){
			var autocomplete = new google.maps.places.Autocomplete(this);
			var submitBtn = $(this).parents('[' + SimpleLocator.selectors.form + ']').find('[' + SimpleLocator.selectors.submitButton + ']');
			google.maps.event.addListener(autocomplete, 'place_changed', function(){
				$(submitBtn).click();
			});
		});
	}
	
	return self.bindEvents();
}
/**
* Show a Default Map if the option is selected
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.DefaultMap = function()
{
	var self = this;
	var $ = jQuery;

	self.selectors = {
		map : 'data-simple-locator-default-enabled'	
	}

	self.bindEvents = function()
	{
		$(document).ready(function(){
			self.queueDefaultMaps();
		});
	}

	/**
	* Queue the default map
	* @param boolean errors (geolocation errors) - if true, show default map (not user centered)
	*/
	self.queueDefaultMaps = function(errors)
	{
		var maps = $('[' + self.selectors.map + ']');
		$.each(maps, function(){
			var map = $(this);
			if ( wpsl_locator.default_user_center !== 'true' && !errors ){
				self.loadDefault(map);
				return;
			}
			
			// var userLocation = new SimpleLocator.UserLocation;
			// userLocation = userLocation.getLocation();
			// console.log(userLocation);
		});
		
			// if ( wpsl_locator.default_user_center === 'true' && navigator.geolocation && !errors ){
			// 	var forms = $('.simple-locator-form');
			// 	$.each(forms, function(i, v){
			// 		var formelements = setFormElements($(this));
			// 		$(formelements.results).empty().addClass('loading').show();
			// 		navigator.geolocation.getCurrentPosition(function(position){
			// 			process_geo_button(position, formelements);
			// 		}, function(error){
			// 			queue_default_map(true);
			// 			$(formelements.results).empty().removeClass('loading').hide();
			// 		});
			// 	});
			// } else {
			// 	self.loadDefault();
			// }
	}

	self.loadDefault = function(map)
	{
		var latitude = wpsl_locator.default_latitude;
		var longitude = wpsl_locator.default_longitude;
		$(map).removeClass('loading');
			
		var center = new google.maps.LatLng(latitude, longitude);
		var mapOptions = {
			center: center,
			zoom: parseInt(wpsl_locator.default_zoom),
			mapTypeControl: false,
			streetViewControl: false,
			styles: wpsl_locator.mapstyles
		}
		// Override options if custom options are set
		if ( wpsl_locator.custom_map_options === '1' )	mapOptions = wpsl_locator.map_options;
		mapOptions.center = center;
		var map = new google.maps.Map(map[0],mapOptions);
	}
	
	return self.bindEvents();
}
/**
* Display a single location map
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.AllLocations = function()
{
	var self = this;
	var $ = jQuery;

	self.locations = [];

	self.selectors = {
		map : 'data-simple-locator-all-locations-map'
	}

	self.bindEvents = function()
	{
		if ( $('[' + self.selectors.map + ']').length < 1 ) return;
		$(document).ready(function(){
			self.getData();
		});
	}

	self.getData = function()
	{
		$.ajax({
			url : SimpleLocator.endpoints.locations,
			type: 'GET',
			datatype: 'jsonp',
			success: function(data){
				self.locations = data;
				self.loadMaps();
			},
			error: function(data){
				if ( wpsl_locator.jsdebug === '1' ){
					console.log('All Locations Error');
				}
			}
		});
	}

	self.loadMaps = function()
	{
		var maps = $('[' + self.selectors.map + ']');
		
		$.each(maps, function(){
			
			var container = $(this);
			var locations = self.locations;
			var mapstyles = wpsl_locator.mapstyles;	
			var mappin = ( wpsl_locator.mappin ) ? wpsl_locator.mappin : '';
			var bounds = new google.maps.LatLngBounds();
			var mapOptions = {
					mapTypeId: 'roadmap',
					mapTypeControl: false,
					zoom: 8,
					styles: mapstyles,
					panControl : false
				}
			if ( wpsl_locator.custom_map_options === '1' )	mapOptions = wpsl_locator.map_options;
				
			var infoWindow = new google.maps.InfoWindow(), marker, i;
			var map = new google.maps.Map( container[0], mapOptions );
			
			// Loop through array of markers & place each one on the map  
			for( i = 0; i < locations.length; i++ ) {
				var position = new google.maps.LatLng(locations[i].latitude, locations[i].longitude);
				bounds.extend(position);
				
				var marker = new google.maps.Marker({
					position: position,
					map: map,
					title: locations[i].title,
					icon: mappin
				});	

				// Info window for each marker 
				google.maps.event.addListener(marker, 'click', (function(marker, i){
					return function() {
						infoWindow.setContent(locations[i].infowindow);
						infoWindow.open(map, marker);
						wpsl_all_locations_marker_clicked(marker, infoWindow)
					}
				})(marker, i));
				
				// Center the Map
				map.fitBounds(bounds);
				var listener = google.maps.event.addListener(map, "idle", function() { 
						if ( locations.length < 2 ) {
						map.setZoom(13);
					}
					google.maps.event.removeListener(listener); 
				});
			}

			// Fit the map bounds to all the pins
			var boundsListener = google.maps.event.addListener((map), 'bounds_changed', function(event) {
				google.maps.event.removeListener(boundsListener);
			});

			wpsl_all_locations_rendered(map);
		});
	}

	return self.bindEvents();
}
/**
* Error Handling
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.Errors = function()
{
	var self = this;
	var $ = jQuery;

	self.error;
	self.form;
	self.formContainer;

	self.bindEvents = function()
	{
		$(document).on('simple-locator-error', function(e, error, form, message){
			self.form = form;
			self.formContainer = $(form).parents('[' + SimpleLocator.selectors.formContainer + ']');
			self.toggleError(message);
			wpsl_error(message, self.form);
		});
	}

	self.toggleError = function(message)
	{
		$(self.formContainer).find('[' + SimpleLocator.selectors.results + ']').hide();
		$(self.formContainer).find('[' + SimpleLocator.selectors.map + ']').addClass('loading');
		$(self.formContainer).find('[' + SimpleLocator.selectors.formError + ']').text(message).show();
	}

	return self.bindEvents();
}
/**
* Primary Simple Locator Initialization
* @package Simple Locator
* @author Kyle Phillips - https://github.com/kylephillips
*
* Document Events:
* simple-locator-error[error-type, form]
* simple-locator-address-geocoded[results, form]
* simple-locator-form-success[results, form]
* simple-locator-infowindow-opened[mapIndex, markerIndex]
*/

jQuery(document).ready(function(){
	new SimpleLocator.Factory;
});

var SimpleLocator = SimpleLocator || {};

// DOM Selectors
SimpleLocator.selectors = {
	form : 'data-simple-locator-form',
	formContainer : 'data-simple-locator-form-container',
	formError : 'data-simple-locator-form-error',
	results : 'data-simple-locator-results',
	map : 'data-simple-locator-map',
	inputAddress : 'data-simple-locator-input-address',
	inputLatitude : 'data-simple-locator-input-latitude',
	inputLongitude : 'data-simple-locator-input-longitude',
	inputUnit : 'data-simple-locator-input-unit',
	inputDistance : 'data-simple-locator-input-distance',
	inputFormattedLocation : 'data-simple-locator-input-formatted-location',
	inputGeocode : 'data-simple-locator-input-geocode',
	submitButton : 'data-simple-locator-submit',
	infoWindowLink : 'data-simple-locator-open-infowindow'
}

// JS Data
SimpleLocator.jsData = {
	secure : false,
}

// API Endpoints
SimpleLocator.endpoints = {
	search : wpsl_locator.rest_url + '/search',
	locations : wpsl_locator.rest_url + '/locations'
}

// Map Objects
SimpleLocator.maps = [];

// Map Markers
SimpleLocator.markers = [];

/**
* Primary Simple Locator Class
*/
SimpleLocator.Factory = function()
{
	var self = this;
	var $ = jQuery;

	self.init = function()
	{
		SimpleLocator.jsData.secure = ( location.protocol === 'https:' ) ? true : false;
		new SimpleLocator.Geocoder;
		new SimpleLocator.PlacesAutocomplete;
		new SimpleLocator.DefaultMap;
		new SimpleLocator.SingleLocation;
		new SimpleLocator.AllLocations;
		new SimpleLocator.Form;
		new SimpleLocator.ResultsMap;
		new SimpleLocator.ResultsList;
		new SimpleLocator.InfoWindowOpen;
		new SimpleLocator.Errors;
	}

	return self.init();
}