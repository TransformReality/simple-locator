/**
* Callback functions available to users
* Place in Theme scripts to perform actions after map has rendered
* Theme scripts should be enqueued with a script dependency for 'simple-locator'
* Deprecated as of version 2 in place of events.
*/

// Deprecated global vars replaced with scoped variables
var active_form = '';
var formatted_address = '';
var googlemaps_response = '';

// Replaced with data-simple-locator-open-infowindow attribute on link
function openInfoWindow(id){
	google.maps.event.trigger(SimpleLocator.markers[0][id], 'click');
	var lat = SimpleLocator.markers[0][id].getPosition().lat();
	var lng = SimpleLocator.markers[0][id].getPosition().lng();
	var position = new google.maps.LatLng(lat,lng);
	SimpleLocator.maps[0].panTo(position);
	SimpleLocator.maps[0].fitBounds(position);
	SimpleLocator.maps[0].setZoom(12);
	return false;
}

// Runs before form has been submitted/after click
// Replaced with event: simple-locator-before-submit[form]
function wpsl_before_submit(active_form, formelements){}

// Runs after map & results render
// Replaced with two events: simple-locator-map-rendered[mapIndex, form], simple-locator-results-rendered[listIndex, form]
function wpsl_after_render(active_form){}

// Runs on click event on a map marker
// Replaced with event: simple-locator-marker-clicked[marker, index, form, post_id]
function wpsl_click_marker(marker, i, active_form, post_id){}

// Runs if no results were returned from the query
// Replaced with event: simple-locator-error[error, form, message]
function wpsl_no_results(location, active_form){}

// Runs on form error
// Replaced with event: simple-locator-error[error, form, message]
function wpsl_error(message, active_form){}

// Runs immediately on form success, pre-render of map/results
// Replaced with event: simple-locator-form-success[data, form]
function wpsl_success(resultcount, results, active_form){}

// Returns the Google Maps Response
function wpsl_googlemaps_response(){
	return googlemaps_response;
}

// Runs after locations map has rendered
// Replaced with event: simple-locator-all-locations-rendered[map]
function wpsl_all_locations_rendered(map){}

// Runs after clicking on a marker in all locations map
// Replaced with event: simple-locator-all-locations-marker-clicked[marker, infoWindow]
function wpsl_all_locations_marker_clicked(marker, infoWindow){}

function wpsl_googlemaps_response(){
	return googlemaps_response;
}
/**
* Display a single location map
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.SingleLocation = function()
{
	var self = this;
	var $ = jQuery;

	self.selectors = {
		mapContainer : 'data-simple-locator-single-map',
		latitude : 'data-latitude',
		longitude : 'data-longitude',
		title : 'data-title'
	}

	self.bindEvents = function()
	{
		$(document).ready(function(){
			self.loadAllMaps();
		});
	}

	self.loadAllMaps = function()
	{
		var maps = $('[' + self.selectors.mapContainer + ']');
		$.each(maps, function(){
			self.loadMap($(this));
		});
	}

	/**
	* Load the map
	*/
	self.loadMap = function(container)
	{
		var latitude = parseFloat($(container).attr(self.selectors.latitude));
		var longitude = parseFloat($(container).attr(self.selectors.longitude));
		var title = $(container).attr(self.selectors.title);

		var mappin = ( wpsl_locator.mappin ) ? wpsl_locator.mappin : '';
		var position = new google.maps.LatLng( latitude, longitude );
		var options = {
			zoom: 12,
			styles: wpsl_locator.mapstyles
		};
		
		// Override options if custom options are set
		if ( wpsl_locator.custom_map_options === '1' ) options = wpsl_locator.map_options;
		options.center = position;

		var map = new google.maps.Map(container[0], options);
		var marker = new google.maps.Marker({
			position: position,
			map: map,
			icon: mappin,
			title: title
		});
		$(container).removeClass('loading');
	}

	return self.bindEvents();
}
/**
* The Primary Form Object
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.Form = function()
{
	var self = this;
	var $ = jQuery;

	self.activeForm;
	self.activeFormContainer;
	self.isWidget = false;
	self.mapContainer;
	self.resultsContainer;
	self.formData;
	self.isAjax = false;
	self.page = 0;

	self.bindEvents = function()
	{
		$(document).on('click', '[' + SimpleLocator.selectors.submitButton + ']', function(e){
			e.preventDefault();
			self.activeForm = $(this).parents('[' + SimpleLocator.selectors.form + ']');
			self.activeFormContainer = $(this).parents('[' + SimpleLocator.selectors.formContainer + ']');
			self.setAjax()
			active_form = self.activeForm; // Deprecated
			wpsl_before_submit(self.activeForm); // Deprecated
			$(document).trigger('simple-locator-before-submit', [self.activeForm]);
			self.processForm();
		});
		$(document).on('simple-locator-geolocation-success', function(e, form){
			self.activeForm = $(form);
			self.activeFormContainer = $(form).parents('[' + SimpleLocator.selectors.formContainer + ']');
			self.setAjax();
			wpsl_before_submit(self.activeForm); // Deprecated
			self.toggleLoading(true, true);
			$(document).trigger('simple-locator-before-submit', [self.activeForm]);
			self.setResultsContainers();
			self.setFormData();
			self.submitForm();
		});
		$(document).on('simple-locator-address-geocoded', function(e, results, form){
			self.toggleLoading(true, true);
			$(self.activeForm).find('[' + SimpleLocator.selectors.inputLatitude + ']').val(results.latitude);
			$(self.activeForm).find('[' + SimpleLocator.selectors.inputLongitude + ']').val(results.longitude);
			$(self.activeForm).find('[' + SimpleLocator.selectors.inputFormattedLocation + ']').val(results.formatted_address);
			self.setFormData();
			self.submitForm();
		});
		$(document).on('click', '[' + SimpleLocator.selectors.paginationButton + ']', function(e){
			if ( !self.activeForm ) return;
			e.preventDefault();
			$(self.activeFormContainer).addClass('loading');
			self.paginate($(this));
		});
		$(document).on('simple-locator-autocomplete-changed', function(e, place, form){
			self.activeForm = $(form);
			self.activeFormContainer = $(form).parents('[' + SimpleLocator.selectors.formContainer + ']');
			self.setAjax();
			self.toggleLoading(true, true);
			$(self.activeForm).find('[' + SimpleLocator.selectors.inputLatitude + ']').val(place.geometry.location.lat());
			$(self.activeForm).find('[' + SimpleLocator.selectors.inputLongitude + ']').val(place.geometry.location.lng());
			$(self.activeForm).find('[' + SimpleLocator.selectors.inputFormattedLocation + ']').val(place.formatted_address);
			if ( self.page > 0 ) self.page = 0;
			self.setFormData();
			self.submitForm();
		});
	}

	/**
	* Set whether the active form is ajax or not
	*/
	self.setAjax = function()
	{
		var ajax = $(self.activeForm).attr(SimpleLocator.selectors.ajaxForm);
		self.isAjax = ( typeof ajax === 'undefined' || ajax === '' ) ? false : true;
	}

	/**
	* Process the form submission
	*/
	self.processForm = function(geocode)
	{
		self.toggleLoading(true, true);
		self.setResultsContainers();
		var geocoder = new SimpleLocator.Geocoder();
		geocoder.getCoordinates(self.activeForm);
	}

	/**
	* Set the appropriate containers for results
	*/
	self.setResultsContainers = function()
	{
		if ( $(self.activeForm).siblings('#widget').length > 0 ) self.isWidget = true;	
		if ( typeof wpsl_locator_options === 'undefined' || wpsl_locator_options === '' ) wpsl_locator_options = '';
		self.mapContainer = ( wpsl_locator_options.mapcont === '' || self.isWidget )
			? $(self.activeFormContainer).find('[' + SimpleLocator.selectors.map + ']')
			: $(wpsl_locator_options.mapcont);
		
		self.resultsContainer = ( wpsl_locator_options.resultscontainer === '' || self.isWidget )
			? (self.activeFormContainer).find('[' + SimpleLocator.selectors.results + ']')
			: $(wpsl_locator_options.resultscontainer);
		return;
	}

	/**
	* Set the form data for processing
	*/
	self.setFormData = function(geocode_results)
	{
		var allow_empty_address = $(self.activeForm).attr('data-simple-locator-form-allow-empty');
		allow_empty_address = ( typeof allow_empty_address === 'undefined' || allow_empty_address === '' ) ? false : true;

		var address = $(self.activeForm).find('[' + SimpleLocator.selectors.inputAddress + ']');
		address = ( typeof address === 'undefined' ) ? false : $(address).val();

		var distance = $(self.activeForm).find('[' + SimpleLocator.selectors.inputDistance + ']');
		distance = ( typeof distance === 'undefined' ) ? false : $(distance).val();

		var geolocation = $(self.activeForm).find('[' + SimpleLocator.selectors.inputGeocode + ']').val();
		geolocation = ( geolocation === '' || geolocation === 'false' ) ? false : true;	

		var limit = $(self.activeForm).find('[' + SimpleLocator.selectors.inputLimit + ']').val();
		limit = ( limit === '' ) ? null : limit;

		self.formData = {
			address : address,
			formatted_address : $(self.activeForm).find('[' + SimpleLocator.selectors.inputFormattedLocation + ']').val(),
			distance : distance,
			latitude : $(self.activeForm).find('[' + SimpleLocator.selectors.inputLatitude + ']').val(),
			longitude :  $(self.activeForm).find('[' + SimpleLocator.selectors.inputLongitude + ']').val(),
			unit : $(self.activeForm).find('[' + SimpleLocator.selectors.inputUnit + ']').val(),
			geolocation : geolocation,
			allow_empty_address : allow_empty_address,
			ajax : self.isAjax,
			per_page : limit
		}

		self.setTaxonomies();

		// Custom Input Data (for SQL filter availability)
		if ( wpsl_locator.postfields.length == 0 ) return
		for ( var i = 0; i < wpsl_locator.postfields.length; i++ ){
			var field = wpsl_locator.postfields[i];
			formdata[field] = $('input[name=' + field + ']').val();
		}
	}

	/**
	* Set taxonomies in the form data if applicable
	*/
	self.setTaxonomies = function()
	{
		var taxonomyCheckboxes = $(self.activeForm).find('[data-simple-locator-taxonomy-checkbox]:checked');
		var taxonomySelect = $(self.activeForm).find('[data-simple-locator-taxonomy-select]');
		var taxonomies = {};
	
		// Select Menus
		$.each(taxonomySelect, function(i, v){
			if ( $(this).val() === "" ) return;
			taxonomies[$(this).attr('data-simple-locator-taxonomy-select')] = [$(this).val()];
		});

		// Checkboxes
		$.each(taxonomyCheckboxes, function(i, v){
			var tax_name = $(this).attr('data-simple-locator-taxonomy-checkbox');
			if ( !(taxonomies[tax_name] instanceof Array) ) taxonomies[tax_name] = [];
			taxonomies[tax_name].push(parseInt($(this).val()));
		});

		self.formData.taxfilter = taxonomies;
	}

	/**
	* Submit the form
	*/
	self.submitForm = function()
	{
		if ( !self.formData.ajax ) {
			$(self.activeForm).submit();
			return;
		}
		self.formData.page = self.page;
		$.ajax({
			url : SimpleLocator.endpoints.search,
			type: 'GET',
			datatype: 'jsonp',
			data: self.formData,
			success: function(data){
				if ( wpsl_locator.jsdebug === '1' ){
					console.log('Form Response');
					console.log(data);
				}
				if (data.status === 'error'){
					$(document).trigger('simple-locator-error', [self.activeForm, data.message]);
					self.toggleLoading(false, true);
					return;
				}
				if ( data.result_count === 0 ){
					var message = wpsl_locator.nolocationserror + ' ' + data.formatted_address;
					$(document).trigger('simple-locator-error', [self.activeForm, message]);
					wpsl_no_results(self.formData.formatted_address, self.activeForm); // Deprecated
					self.toggleLoading(false, true);
					return;
				}
				$(document).trigger('simple-locator-form-success', [data, self.activeForm]);
				wpsl_success(data.result_count, data.results, self.activeForm); // Deprecated
			},
			error: function(data){
				if ( wpsl_locator.jsdebug === '1' ){
					console.log('Form Response Error');
					console.log(data.responseText);
				}
			}
		});
	}

	/**
	* Pagination Action
	*/
	self.paginate = function(button)
	{
		var direction = $(button).attr(SimpleLocator.selectors.paginationButton);
		if ( direction === 'next' ){
			self.page = self.page + 1;
			self.submitForm();
			return;
		}
		self.page = self.page - 1;
		self.submitForm();
	}

	/**
	* Toggle Loading
	*/
	self.toggleLoading = function(loading, clearvalues)
	{
		var results = $(self.activeFormContainer).find('[' + SimpleLocator.selectors.results + ']');
		if ( loading ){
			if ( clearvalues ){
				$('[' + SimpleLocator.selectors.inputLatitude + ']').val('');
				$('[' + SimpleLocator.selectors.inputLongitude + ']').val('');
				$('[' + SimpleLocator.selectors.inputGeocode + ']').val('');
				$('[' + SimpleLocator.selectors.inputFormattedLocation + ']').val('');
			}
			$(self.activeFormContainer).addClass('loading');
			$(self.activeFormContainer).find('[' + SimpleLocator.selectors.formError + ']').hide();
			$(results).empty();
			return;
		}
		$(self.activeFormContainer).removeClass('loading');
	}

	return self.bindEvents();
}
/**
* Geocode an Address
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.Geocoder = function()
{
	var self = this;
	var $ = jQuery;

	/**
	* Get coordinates and formatted for a provided address
	* @param address string
	* @param form object
	* @return array
	*/
	self.getCoordinates = function(form)
	{
		var searchTerm = $(form).find('[' + SimpleLocator.selectors.inputAddress + ']').val();
		var searchResults = [];
		geocoder = new google.maps.Geocoder();
		geocoder.geocode({
			'address' : searchTerm
		}, function(results, status){
			if ( status == google.maps.GeocoderStatus.OK ){
				googlemaps_response = results; // deprecated
				searchResults['latitude'] = results[0].geometry.location.lat();
				searchResults['longitude'] = results[0].geometry.location.lng();
				searchResults['formatted_address'] = results[0].formatted_address;
				if ( wpsl_locator.jsdebug === '1' ){
					console.log('Google Geocode Response');
					console.log(results);
				}
				$(document).trigger('simple-locator-address-geocoded', [searchResults, form]);
			} else {
				$(document).trigger('simple-locator-error', [form, wpsl_locator.notfounderror]);
				$(form).parents('[' + SimpleLocator.selectors.formContainer + ']').removeClass('loading');
			}
		});
	}
}
/**
* Display results on a map (non-ajax results)
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.ResultsMapNonAjax = function()
{
	var self = this;
	var $ = jQuery;

	self.activeMap;
	self.activeWrapper;
	self.mapIndex;

	self.selectors = {
		latitude : 'data-latitude',
		longitude : 'data-longitude',
	}

	self.bindEvents = function()
	{
		$(document).ready(function(){
			self.activeMap = $('[' + SimpleLocator.selectors.mapNonAjax + ']');
			if ( self.activeMap.length < 1 ) return;
			self.toggleLoading(true);
			self.setMapIndex();
			self.loadMap();
		});
	}

	/**
	* Set the map index
	*/
	self.setMapIndex = function()
	{
		var wrappers = $('[' + SimpleLocator.selectors.resultsWrapper + ']');
		self.activeWrapper = $(self.activeMap).parents('[' + SimpleLocator.selectors.resultsWrapper + ']');
		self.mapIndex = $(self.activeWrapper).index(wrappers);
	}

	self.loadMap = function()
	{
		SimpleLocator.markers[self.mapIndex] = [];
		
		var mappin = ( wpsl_locator.mappin ) ? wpsl_locator.mappin : '';
		var bounds = new google.maps.LatLngBounds();
		var mapOptions = {
			mapTypeId: 'roadmap',
			mapTypeControl: false,
			zoom: 8,
			styles: wpsl_locator.mapstyles,
			panControl : false
		}

		// Override options if custom options are set
		if ( wpsl_locator.custom_map_options === '1' ) mapOptions = wpsl_locator.map_options;
		var locations = [];
		var infoWindow = new google.maps.InfoWindow(), marker, i;
		
		SimpleLocator.maps[self.mapIndex] = new google.maps.Map( self.activeMap[0], mapOptions );
		self.addUserPin();
		
		// Array of locations
		for (var i = 0; i < simple_locator_results.length; i++) {
			var location = {
				title: simple_locator_results[i].title,
				lat: simple_locator_results[i].lat,
				lng: simple_locator_results[i].lng,
				id: simple_locator_results[i].id,
				infowindow: simple_locator_results[i].infowindow
			};
			locations.push(location);
		}

		// Loop through array of markers & place each one on the map  
		for( i = 0; i < locations.length; i++ ) {
			var position = new google.maps.LatLng(locations[i].lat, locations[i].lng);
			bounds.extend(position);			
			marker = new google.maps.Marker({
				position: position,
				map: SimpleLocator.maps[self.mapIndex],
				title: locations[i].title,
				icon: mappin
			});	

			// Info window for each marker 
			google.maps.event.addListener(marker, 'click', (function(marker, i) {
				return function() {
					infoWindow.setContent(locations[i].infowindow);
					infoWindow.open(SimpleLocator.maps[self.mapIndex], marker);

					// Simple Locator Callback function for click event
					$(document).trigger('simple-locator-marker-clicked', [marker, i, self.activeWrapper, locations[i].id]);
					wpsl_click_marker(marker, i, self.activeWrapper, locations[i].id); // Deprecated
				}
			})(marker, i));

			 // Push the marker to the global 'markers' array
	        SimpleLocator.markers[self.mapIndex].push(marker);
			
			// Center the Map
			SimpleLocator.maps[self.mapIndex].fitBounds(bounds);
			var listener = google.maps.event.addListener(SimpleLocator.maps[self.mapIndex], "idle", function() { 
					if ( simple_locator_results.length < 2 ) {
					SimpleLocator.maps[self.mapIndex].setZoom(13);
				}
				google.maps.event.removeListener(listener); 
			});
		}

		self.toggleLoading(false);
		$(document).trigger('simple-locator-map-rendered', [self.mapIndex, self.activeWrapper]);
	}

	/**
	* Add the user map pin
	*/
	self.addUserPin = function()
	{
		if ( wpsl_locator.includeuserpin === '' ) return;
		if ( SimpleLocator.userPin[self.mapIndex] ) SimpleLocator.userPin[self.mapIndex].setMap(null);
		var mappin = ( wpsl_locator.mappinuser ) ? wpsl_locator.mappinuser : '';
		var latitude = parseFloat($(self.activeMap).attr(self.selectors.latitude));
		var longitude = parseFloat($(self.activeMap).attr(self.selectors.longitude));
		var position = new google.maps.LatLng(latitude, longitude);
		marker = new google.maps.Marker({
			position: position,
			map: SimpleLocator.maps[self.mapIndex],
			icon: mappin
		});	
		SimpleLocator.userPin[self.mapIndex] = marker;
	}

	/**
	* Toggle the loading state on the map
	*/
	self.toggleLoading = function(loading)
	{
		if ( loading ){
			$(self.activeMap).addClass('loading');
			return;
		}
		$(self.activeMap).show();
		$(self.activeMap).removeClass('loading');
	}

	return self.bindEvents();
}
/**
* Display results on a map
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.ResultsMap = function()
{
	var self = this;
	var $ = jQuery;

	self.activeForm;
	self.activeFormContainer;
	self.activeMap;
	self.mapContainer;
	self.data;
	self.mapIndex;

	self.bindEvents = function()
	{
		$(document).on('simple-locator-form-success', function(e, data, form){
			self.activeForm = $(form);
			self.activeFormContainer = $(form).parents('[' + SimpleLocator.selectors.formContainer + ']');
			self.data = data;
			self.setMapContainer();
			self.setMapIndex();
			self.loadMap();
		});
	}

	/**
	* Set the map index
	*/
	self.setMapIndex = function()
	{
		var wrappers = $('[' + SimpleLocator.selectors.resultsWrapper + ']');
		self.mapIndex = $(self.activeFormContainer).index(wrappers);
	}

	/**
	* Set the map container
	*/
	self.setMapContainer = function()
	{
		var container = $(self.activeForm).attr('data-simple-locator-map-container');
		if ( typeof container === 'undefined' || container === ''){
			self.activeMap = $(self.activeFormContainer).find('[' + SimpleLocator.selectors.map + ']');
			return;
		}
		self.activeMap = $(container);
	}

	self.loadMap = function()
	{
		var mappin = ( wpsl_locator.mappin ) ? wpsl_locator.mappin : '';
		var bounds = new google.maps.LatLngBounds();
		var infoWindow = new google.maps.InfoWindow(), marker, i;
		
		if ( !SimpleLocator.maps[self.mapIndex] ){
			// Map Controls
			var disablecontrols = $(self.activeForm).attr('data-simple-locator-hide-map-controls');
			disablecontrols = ( typeof disablecontrols === 'undefined' || disablecontrols === '' ) ? false : true;

			// Control Position
			var controlposition = $(self.activeForm).attr('data-simple-locator-map-control-position');
			controlposition = ( typeof controlposition === 'undefined' || controlposition === '' ) ? 'TOP_LEFT' : controlposition;
	
			var mapOptions = {
				mapTypeId: 'roadmap',
				mapTypeControl: false,
				zoom: 8,
				styles: wpsl_locator.mapstyles,
				panControl : false,
				disableDefaultUI: disablecontrols,
				zoomControlOptions : {
					position : google.maps.ControlPosition[controlposition]
				}
			}

			// Override options if custom options are set
			if ( wpsl_locator.custom_map_options === '1' ) mapOptions = wpsl_locator.map_options;
			SimpleLocator.maps[self.mapIndex] = new google.maps.Map( self.activeMap[0], mapOptions );
			SimpleLocator.markers[self.mapIndex] = [];
		}
		
		// Array of locations
		var locations = [];
		for (var i = 0, length = self.data.results.length; i < length; i++) {
			var location = {
				title: self.data.results[i].title,
				lat: self.data.results[i].latitude,
				lng: self.data.results[i].longitude,
				id: self.data.results[i].id,
				infowindow: self.data.results[i].infowindow
			};
			locations.push(location);
		}
		
		self.removeMapMarkers();
		self.addUserPin();

		// Loop through array of markers & place each one on the map  
		for( i = 0; i < locations.length; i++ ) {
			var position = new google.maps.LatLng(locations[i].lat, locations[i].lng);
			bounds.extend(position);
			
			marker = new google.maps.Marker({
				position: position,
				map: SimpleLocator.maps[self.mapIndex],
				title: locations[i].title,
				icon: mappin
			});	

			// Info window for each marker 
			google.maps.event.addListener(marker, 'click', (function(marker, i) {
				return function() {
					infoWindow.setContent(locations[i].infowindow);
					infoWindow.open(SimpleLocator.maps[self.mapIndex], marker);

					// Simple Locator Callback function for click event
					$(document).trigger('simple-locator-marker-clicked', [marker, i, self.activeForm, locations[i].id]);
					wpsl_click_marker(marker, i, self.activeForm, locations[i].id); // Deprecated
				}
			})(marker, i));

			 // Push the marker to the global 'markers' array
	        SimpleLocator.markers[self.mapIndex].push(marker);
			
			// Center the Map
			SimpleLocator.maps[self.mapIndex].fitBounds(bounds);
			var listener = google.maps.event.addListener(SimpleLocator.maps[self.mapIndex], "idle", function() { 
					if ( self.data.results.length < 2 ) {
					SimpleLocator.maps[self.mapIndex].setZoom(13);
				}
				google.maps.event.removeListener(listener); 
			});
		}

		self.toggleLoading(false);
		$(document).trigger('simple-locator-map-rendered', [self.mapIndex, self.activeForm]);
	}

	/**
	* Add the user map pin
	*/
	self.addUserPin = function()
	{
		if ( wpsl_locator.includeuserpin === '' ) return;
		if ( SimpleLocator.userPin[self.mapIndex] ) SimpleLocator.userPin[self.mapIndex].setMap(null);
		var mappin = ( wpsl_locator.mappinuser ) ? wpsl_locator.mappinuser : '';
		var position = new google.maps.LatLng(self.data.latitude, self.data.longitude);
		marker = new google.maps.Marker({
			position: position,
			map: SimpleLocator.maps[self.mapIndex],
			icon: mappin
		});	
		SimpleLocator.userPin[self.mapIndex] = marker;
	}

	/**
	* Remove all markers from the map
	*/
	self.removeMapMarkers = function()
	{
		for (var i = 0; i < SimpleLocator.markers[self.mapIndex].length; i++){
			SimpleLocator.markers[self.mapIndex][i].setMap(null);
		}
		SimpleLocator.markers[self.mapIndex] = [];
	}

	/**
	* Toggle the loading state on the map
	*/
	self.toggleLoading = function(loading)
	{
		if ( loading ){
			$(self.activeMap).addClass('loading');
			return;
		}
		$(self.activeMap).show();
		$(self.activeMap).removeClass('loading');
	}

	return self.bindEvents();
}
/**
* Display a list of results
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.ResultsList = function()
{
	var self = this;
	var $ = jQuery;

	self.activeForm;
	self.activeFormContainer;
	self.activeList;
	self.data;
	self.listIndex;
	self.paginated = false;

	self.bindEvents = function()
	{
		$(document).on('simple-locator-form-success', function(e, data, form){
			self.activeForm = $(form);
			self.activeFormContainer = $(form).parents('[' + SimpleLocator.selectors.formContainer + ']');
			self.data = data;
			if ( self.data.per_page !== 0 ) self.paginated = true;
			self.setListContainer();
			self.setMapIndex();
			self.loadList();
		});
	}

	/**
	* Set the map index
	*/
	self.setMapIndex = function()
	{
		var wrappers = $('[' + SimpleLocator.selectors.resultsWrapper + ']');
		self.listIndex = $(self.activeFormContainer).index(wrappers);
	}

	/**
	* Set the list container
	*/
	self.setListContainer = function()
	{
		var container = $(self.activeForm).attr('data-simple-locator-results-container');
		if ( typeof container === 'undefined' || container === ''){
			self.activeList = $(self.activeFormContainer).find('[' + SimpleLocator.selectors.results + ']');
			return;
		}
		self.activeList = $(container);
	}

	/**
	* Load the results
	*/
	self.loadList = function()
	{
		if ( self.data.result_count < 1 ){ // No results were returned
			$(self.activeFormContainer).find('[' + SimpleLocator.selectors.error + ']').text(wpsl_locator_options.noresultstext).show();
			$(self.activeList).hide();
			$(self.activeFormContainer).find('[' + SimpleLocator.selectors.map + ']').hide();
			wpsl_no_results(data.formatted_address, active_form);
			return;
		}

		var location = ( self.data.result_count === 1 ) ? wpsl_locator.location : wpsl_locator.locations;

		var output = '';

		var header = '<h3 class="wpsl-results-header">' + self.data.result_count + ' ' + location;
		if ( self.data.latitude !== "" ) header += ' ' + wpsl_locator.found_within + ' ' + self.data.distance + ' ' + self.data.unit + ' ' + wpsl_locator.of + ' ';
		header += ( self.data.geolocation === "true" ) ? wpsl_locator.yourlocation : self.data.formatted_address;
		header += '</h3>';
		if ( self.paginated && self.data.results_header ) {
			header = self.data.results_header;
			if ( self.data.current_counts && self.data.total_pages > 1) header += self.data.current_counts;
		}

		output += header;
		
		if ( wpsl_locator_options.resultswrapper !== "" ) output += '<' + wpsl_locator_options.resultswrapper + '>';

		for( i = 0; i < self.data.results.length; i++ ) {
			output = output + self.data.results[i].output;
		}

		if ( wpsl_locator_options.resultswrapper !== "" ) output += '</' + wpsl_locator_options.resultswrapper + '>';

		if ( self.paginated && self.data.total_pages > 1 ){
			output += '<div class="simple-locator-ajax-pagination">';
			if ( self.data.back_button ) output += self.data.back_button;
			if ( self.data.next_button ) output += self.data.next_button;
			if ( self.data.loading_spinner ) output += self.data.loading_spinner;
			if ( self.data.page_position ) output += self.data.page_position;
			output += '</div>';
		}

		self.toggleLoading(false);
		$(self.activeList).removeClass('loading').html(output);

		$(document).trigger('simple-locator-results-rendered', [self.listIndex, self.activeForm]);
		wpsl_after_render(self.activeList); // Deprecated
	}

	/**
	* Toggle the loading state on the map
	*/
	self.toggleLoading = function(loading)
	{
		if ( loading ){
			$(self.activeFormContainer).addClass('loading');
			return;
		}
		$(self.activeFormContainer).removeClass('loading');
	}

	return self.bindEvents();
}
/**
* Open an infowindow when clicking a link
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.InfoWindowOpen = function()
{
	var self = this;
	var $ = jQuery;

	self.mapIndex;
	self.markerIndex;

	self.bindEvents = function()
	{
		$(document).on('click', '[' + SimpleLocator.selectors.infoWindowLink + ']', function(e){
			e.preventDefault();
			self.setIndexes($(this));
			self.openInfoWindow();
		});
	}

	/**
	* Set the map index
	*/
	self.setIndexes = function(link)
	{
		var activeList = $(link).parents('[' + SimpleLocator.selectors.resultsWrapper + ']');
		var lists = $('[' + SimpleLocator.selectors.resultsWrapper + ']');
		self.mapIndex = $(activeList).index(lists);
		self.markerIndex = parseInt($(link).attr(SimpleLocator.selectors.infoWindowLink));
	}

	/**
	* Open the infowindow
	*/
	self.openInfoWindow = function()
	{
		google.maps.event.trigger(SimpleLocator.markers[self.mapIndex][self.markerIndex], 'click');
		$(document).trigger('simple-locator-infowindow-opened', [self.mapIndex, self.markerIndex]);
	}

	return self.bindEvents();
}
/**
* Gets the user's current location if available
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.Geolocation = function()
{
	var self = this;
	var $ = jQuery;

	self.geolocationAvailable = true;
	self.activeForm;
	self.activeFormContainer;

	self.bindEvents = function()
	{
		$(document).ready(function(){
			if ( wpsl_locator.showgeobutton !== 'true' ) return false;
			self.setGeolocationAvailable();
		});
		$(document).on('simple-locator-geolocation-available-set', function(){
			if ( !self.geolocationAvailable ) return;
			self.appendButton();
		});
		$(document).on('click', '[' + SimpleLocator.selectors.geoButton + ']', function(e){
			e.preventDefault();
			self.activeForm = $(this).parents('[' + SimpleLocator.selectors.form + ']');
			self.activeFormContainer = $(this).parents('[' + SimpleLocator.selectors.formContainer + ']');
			self.toggleLoading(true);
			self.getLocation();
		});
	}

	/**
	* Append the Geolocation Button if available
	*/
	self.appendButton = function()
	{
		var html = '<button class="wpsl-geo-button" ' + SimpleLocator.selectors.geoButton + '>' + wpsl_locator.geobuttontext + '</button>';
			$('.geo_button_cont').html(html);
	}

	/**
	* Set whether or not geolocation is available
	*/
	self.setGeolocationAvailable = function()
	{
		$('[' + SimpleLocator.selectors.formContainer + ']').removeClass('no-geolocation');
		if ( !navigator.geolocation ) return false;
		navigator.permissions.query({name:'geolocation'}).then(function(permissionStatus){  
    		if ( permissionStatus.state == 'denied' ) {
    			self.geolocationAvailable = false;
    			$('[' + SimpleLocator.selectors.formContainer + ']').addClass('no-geolocation');
    		}
    		$(document).trigger('simple-locator-geolocation-available-set', [self.geolocationAvailable]);
    	});
	}

	/**
	* Returns user location if available, null if not
	*/
	self.getLocation = function()
	{
		navigator.geolocation.getCurrentPosition(function(position){
			$(self.activeForm).find('[' + SimpleLocator.selectors.inputLatitude + ']').val(position.coords.latitude);
			$(self.activeForm).find('[' + SimpleLocator.selectors.inputLongitude + ']').val(position.coords.longitude);
			$(self.activeForm).find('[' + SimpleLocator.selectors.inputGeocode + ']').val('1');
			$(document).trigger('simple-locator-geolocation-success', [self.activeForm]);
		},
		function(error){
			self.toggleLoading(false);
		});
	}

	/**
	* Toggle Loading on the form
	*/
	self.toggleLoading = function(loading)
	{
		if ( loading ){
			$('[' + SimpleLocator.selectors.inputAddress + ']').val('');
			$('[' + SimpleLocator.selectors.inputLatitude + ']').val('');
			$('[' + SimpleLocator.selectors.inputLongitude + ']').val('');
			$('[' + SimpleLocator.selectors.inputGeocode + ']').val('');
			$('[' + SimpleLocator.selectors.inputFormattedLocation + ']').val('');
			$(self.activeFormContainer).find('[' + SimpleLocator.selectors.formError + ']').hide();
			$(self.activeFormContainer).find('[' + SimpleLocator.selectors.results + ']').empty().addClass('loading').show();
			return;
		}
		$(self.activeFormContainer).find('[' + SimpleLocator.selectors.results + ']').removeClass('loading').hide();
	}

	return self.bindEvents();

}
/**
* Enable Google Maps Places Autocomplete on Fields
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.PlacesAutocomplete = function()
{
	var self = this;
	var $ = jQuery;

	self.selectors = {
		input : 'data-simple-locator-autocomplete'
	}

	self.bindEvents = function()
	{
		$(document).ready(function(){
			self.enableAutocomplete();
		});
	}

	self.enableAutocomplete = function()
	{
		var inputs = $('[' + self.selectors.input + ']');
		$.each(inputs, function(i, v){
			var autocomplete = new google.maps.places.Autocomplete(this);
			var submitBtn = $(this).parents('[' + SimpleLocator.selectors.form + ']').find('[' + SimpleLocator.selectors.submitButton + ']');
			var form = $(this).parents('form');
			google.maps.event.addListener(autocomplete, 'place_changed', function(){
				$(document).trigger('simple-locator-autocomplete-changed', [autocomplete.getPlace(), form]);
			});
		});
	}
	
	return self.bindEvents();
}
/**
* Show a Default Map if the option is selected
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.DefaultMap = function()
{
	var self = this;
	var $ = jQuery;

	self.selectors = {
		map : 'data-simple-locator-default-enabled'	
	}

	self.bindEvents = function()
	{
		$(document).ready(function(){
			self.queueDefaultMaps();
		});
	}

	/**
	* Queue the default map
	* @param boolean errors (geolocation errors) - if true, show default map (not user centered)
	*/
	self.queueDefaultMaps = function(errors)
	{
		var maps = $('[' + self.selectors.map + ']');
		$.each(maps, function(){
			var map = $(this);
			if ( wpsl_locator.default_user_center !== 'true' && !errors ){
				self.loadDefault(map);
				return;
			}
			
			// var userLocation = new SimpleLocator.UserLocation;
			// userLocation = userLocation.getLocation();
			// console.log(userLocation);
		});
		
			// if ( wpsl_locator.default_user_center === 'true' && navigator.geolocation && !errors ){
			// 	var forms = $('.simple-locator-form');
			// 	$.each(forms, function(i, v){
			// 		var formelements = setFormElements($(this));
			// 		$(formelements.results).empty().addClass('loading').show();
			// 		navigator.geolocation.getCurrentPosition(function(position){
			// 			process_geo_button(position, formelements);
			// 		}, function(error){
			// 			queue_default_map(true);
			// 			$(formelements.results).empty().removeClass('loading').hide();
			// 		});
			// 	});
			// } else {
			// 	self.loadDefault();
			// }
	}

	self.loadDefault = function(map)
	{
		var latitude = wpsl_locator.default_latitude;
		var longitude = wpsl_locator.default_longitude;
		$(map).removeClass('loading');
			
		var center = new google.maps.LatLng(latitude, longitude);
		var mapOptions = {
			center: center,
			zoom: parseInt(wpsl_locator.default_zoom),
			mapTypeControl: false,
			streetViewControl: false,
			styles: wpsl_locator.mapstyles
		}
		// Override options if custom options are set
		if ( wpsl_locator.custom_map_options === '1' )	mapOptions = wpsl_locator.map_options;
		mapOptions.center = center;
		var map = new google.maps.Map(map[0],mapOptions);
	}
	
	return self.bindEvents();
}
/**
* Display a single location map
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.AllLocations = function()
{
	var self = this;
	var $ = jQuery;

	self.locations = [];

	self.selectors = {
		map : 'data-simple-locator-all-locations-map'
	}

	self.bindEvents = function()
	{
		if ( $('[' + self.selectors.map + ']').length < 1 ) return;
		$(document).ready(function(){
			self.getData();
		});
	}

	self.getData = function()
	{
		$.ajax({
			url : SimpleLocator.endpoints.locations,
			type: 'GET',
			datatype: 'jsonp',
			success: function(data){
				self.locations = data;
				self.loadMaps();
			},
			error: function(data){
				if ( wpsl_locator.jsdebug === '1' ){
					console.log('All Locations Error');
				}
			}
		});
	}

	self.loadMaps = function()
	{
		var maps = $('[' + self.selectors.map + ']');
		
		$.each(maps, function(){
			
			var container = $(this);
			var locations = self.locations;
			var mapstyles = wpsl_locator.mapstyles;	
			var mappin = ( wpsl_locator.mappin ) ? wpsl_locator.mappin : '';
			var bounds = new google.maps.LatLngBounds();
			var mapOptions = {
					mapTypeId: 'roadmap',
					mapTypeControl: false,
					zoom: 8,
					styles: mapstyles,
					panControl : false
				}
			if ( wpsl_locator.custom_map_options === '1' )	mapOptions = wpsl_locator.map_options;
				
			var infoWindow = new google.maps.InfoWindow(), marker, i;
			var map = new google.maps.Map( container[0], mapOptions );
			
			// Loop through array of markers & place each one on the map  
			for( i = 0; i < locations.length; i++ ) {
				var position = new google.maps.LatLng(locations[i].latitude, locations[i].longitude);
				bounds.extend(position);
				
				var marker = new google.maps.Marker({
					position: position,
					map: map,
					title: locations[i].title,
					icon: mappin
				});	

				// Info window for each marker 
				google.maps.event.addListener(marker, 'click', (function(marker, i){
					return function() {
						infoWindow.setContent(locations[i].infowindow);
						infoWindow.open(map, marker);
						$(document).trigger('simple-locator-all-locations-marker-clicked', [marker, infoWindow]);
						wpsl_all_locations_marker_clicked(marker, infoWindow); // Deprecated
					}
				})(marker, i));
				
				// Center the Map
				map.fitBounds(bounds);
				var listener = google.maps.event.addListener(map, "idle", function() { 
						if ( locations.length < 2 ) {
						map.setZoom(13);
					}
					google.maps.event.removeListener(listener); 
				});
			}

			$(document).trigger('simple-locator-all-locations-rendered', [map]);
			wpsl_all_locations_rendered(map); // Deprecated
		});
	}

	return self.bindEvents();
}
/**
* Error Handling
* @package simple-locator
*/
var SimpleLocator = SimpleLocator || {};
SimpleLocator.Errors = function()
{
	var self = this;
	var $ = jQuery;

	self.error;
	self.form;
	self.formContainer;

	self.bindEvents = function()
	{
		$(document).on('simple-locator-error', function(e, form, message){
			self.form = form;
			self.formContainer = $(form).parents('[' + SimpleLocator.selectors.formContainer + ']');
			self.toggleError(message);
			wpsl_error(message, self.form);
		});
	}

	self.toggleError = function(message)
	{
		$(self.formContainer).find('[' + SimpleLocator.selectors.results + ']').hide();
		$(self.formContainer).find('[' + SimpleLocator.selectors.map + ']').addClass('loading');
		$(self.formContainer).find('[' + SimpleLocator.selectors.formError + ']').text(message).show();
	}

	return self.bindEvents();
}
/**
* Primary Simple Locator Initialization
* @package Simple Locator
* @author Kyle Phillips - https://github.com/kylephillips
*
* Document Events:
* simple-locator-error[form, message]
* simple-locator-address-geocoded[results, form]
* simple-locator-autocomplete-changed[place, form]
* simple-locator-form-success[results, form]
* simple-locator-infowindow-opened[mapIndex, markerIndex]
* simple-locator-geolocation-available-set[available]
* simple-locator-geolocation-success[form]
* simple-locator-marker-clicked[marker, markerIndex, form, locationId]
* simple-locator-results-rendered[listIndex, form]
*/

jQuery(document).ready(function(){
	new SimpleLocator.Factory;
});

var SimpleLocator = SimpleLocator || {};

// DOM Selectors
SimpleLocator.selectors = {
	resultsWrapper : 'data-simple-locator-results-wrapper',
	form : 'data-simple-locator-form',
	formContainer : 'data-simple-locator-form-container',
	formError : 'data-simple-locator-form-error',
	results : 'data-simple-locator-results',
	map : 'data-simple-locator-map',
	mapNonAjax : 'data-simple-locator-map-non-ajax',
	inputAddress : 'data-simple-locator-input-address',
	inputLatitude : 'data-simple-locator-input-latitude',
	inputLongitude : 'data-simple-locator-input-longitude',
	inputUnit : 'data-simple-locator-input-unit',
	inputDistance : 'data-simple-locator-input-distance',
	inputFormattedLocation : 'data-simple-locator-input-formatted-location',
	inputGeocode : 'data-simple-locator-input-geocode',
	inputLimit : 'data-simple-locator-input-limit',
	submitButton : 'data-simple-locator-submit',
	infoWindowLink : 'data-simple-locator-open-infowindow',
	geoButton : 'data-simple-locator-geolocation-button',
	ajaxForm : 'data-simple-locator-ajax-form',
	paginationButton : 'data-simple-locator-pagination'
}

// API Endpoints
SimpleLocator.endpoints = {
	search : wpsl_locator.rest_url + '/search',
	locations : wpsl_locator.rest_url + '/locations'
}

// Map Objects
SimpleLocator.maps = [];

// Map Markers
SimpleLocator.markers = [];
SimpleLocator.userPin = [];

/**
* Primary Simple Locator Class
*/
SimpleLocator.Factory = function()
{
	var self = this;
	var $ = jQuery;

	self.init = function()
	{
		new SimpleLocator.Geocoder;
		new SimpleLocator.Geolocation;
		new SimpleLocator.PlacesAutocomplete;
		new SimpleLocator.DefaultMap;
		new SimpleLocator.ResultsMapNonAjax;
		new SimpleLocator.SingleLocation;
		new SimpleLocator.AllLocations;
		new SimpleLocator.Form;
		new SimpleLocator.ResultsMap;
		new SimpleLocator.ResultsList;
		new SimpleLocator.InfoWindowOpen;
		new SimpleLocator.Errors;
	}

	return self.init();
}